//
// Prefix header for all source files of the 'FP3delta' target in the 'FP3delta' project
//

#import <Availability.h>

#ifndef __IPHONE_5_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>


#define T_FLASH_MAX                         100
#define EAD_INPUT_BUFFER_SIZE               2048   //1024 //512 //128
#define TABLEID_MAXALL                      60        // max of ( T_TABLEID_MAX, S_ , X_ )


typedef enum
{
    APP_STATE_NOT_IN_DEMO_MODE = 0,
    APP_STATE_IN_DEMO_MODE = 1,

    
} APP_STATE;


typedef enum
{
    CHECKFIRMWARE_NO_ACTION = 0,
    DO_FIRMWARE_UPDATE,
    FIRMWARE_UP_TO_DATE,
    SERVER_REPONDED_WITH_ERROR,
    DO_WIDEBAND_FIRMWARE_UPDATE,
    SERVER_TIMED_OUT
    
} CHECKFIRMWARE_ACTION;


typedef enum
{
    AUTOTUNE_APPLY = 1,
    AUTOTUNE_TURNOFF,
    AUTOTUNE_DIALOG_TABLE_APPLY,
    AUTOTUNE_DIALOG_APPLY,
    AUTOTUNE_DIALOG_FINISH,
    DOWNLOAD_AND_FLASH,
    FLASH_OK_ENGINE_NOT_RUNNING,
    MAP_LOADED_SAVE,
    MAP_LOADED_PROGRAM,
    FLASH_MODE_NONE
} T_FLASH_MODE;

typedef enum
{
    
    SUCCESS = 0,
    FAILED,
    FP3_TIMEDOUT,    
    CHECKSUM_ERROR
} FP3_RESPONSE;

typedef enum
{
    DELETE = 1,
    SELECT,
    CANCEL,
    CANCELFULL
} Action;

typedef struct structYearDescription
{
    char code;
    char *desc;
} T_YEAR_DESC;


typedef struct structModelDescription
{
    unsigned char model[2];
    char *desc;
} T_MODEL_DESC;



typedef struct struct_eemap
{
    unsigned int  sectoroffset;
    unsigned int  offset;
    unsigned int  size;
} T_EEMAP;



typedef struct structData
{
    unsigned int  rxlength;
    unsigned char data[EAD_INPUT_BUFFER_SIZE];
    
    unsigned int  push;
    unsigned int  pop;
    
} T_RXDATA;


typedef struct struct_tablemask
{
    unsigned int  sectoroffset;
    unsigned int  offset;
    unsigned int  size;
    float         data[30];
    
} T_TABLEFLOAT;


typedef struct struct_tableprogressivity
{
    float         fdata[30][30];
} T_GRIDDATA;


typedef struct struct_rawbuf
{
    unsigned char byte[256];     // 64*5 max expected size
} T_RAWBUF;


typedef struct structAutoTune
{
    float           rpm;
    float           tps;
    float           map;
    float           engineTemp;
    unsigned char   newdataflag;
    unsigned char   reportflag;
    
    unsigned char   tableid;
    unsigned char   tabletype;
    unsigned char   taskflag;
    
    unsigned char   rpmrowcount;  // RPM
    unsigned char   tpscolcount;  // TPS
    
    
    unsigned char   veadjval;
    unsigned char   vesamples;
    unsigned char   maxtimer;
    unsigned char   o2midscale;
    unsigned int    cellslearned;
    unsigned char   value [512];
    unsigned char   flag  [512];
    unsigned char   unlearnedvalue [512];
    unsigned char   compressvalue  [512];
    
    unsigned char   ve [512];    // 2 sectors
    unsigned int    vecount;
    int curRow;
    int curCol;
    
}T_AUTOTUNE;




typedef struct struct_rawsector
{
    unsigned int  checksum;
    unsigned int  flag;
    unsigned char raw[256];
} T_RAWSECTOR;



typedef struct structBikeInfo
{
    unsigned char VINnumber[64+1];  // 1HD1JPV34CB010700
    unsigned char VINmodel[10+1];   // Softail
    unsigned char VINdesc[32+1];    // FXS Blackline FLSTC
    unsigned char VINyear[4+1];     // 2012
    unsigned char VINplant[14+1];   // York, PA USA
    
    unsigned char ECMnumber[12+1];   // 410000006
    unsigned char ECMversion[2+1];   // 357
    unsigned char ECMcalib[12+1];    // 41000063B
    unsigned char ECMseed[2+1];      // 0x0DBE
    unsigned char ECMkey[2+1];       // 0xDBE5
    unsigned char ECMextended[22+1];
    
    unsigned char DEVstate[21+1];     // paired or unpaired
    unsigned char DEVfversion[21+1];  // 1.1.6
    unsigned char DEVhversion[21+1];  // 1.1.6
    unsigned char DEVbtversion[21+1]; // Ver 5.2 iAP <date>
    // 0 no slot, A thru L valid slots
    
    unsigned char DEVlinkedvin[21+1];   // 1HD1JPV34CB010700 (married)
    unsigned char DEVbtmacid[21+1];     // 000666612345
    
    unsigned long odometer;
    unsigned long tamperseal;
    unsigned long tampersealcount;
    
    
    //    unsigned int  fmajor;
    //    unsigned int  fminor;
    //    unsigned int  ftick;
    BOOL isFlashing;
    
    
} T_BIKE_INFO;


typedef struct struct_serial
{
    unsigned int state;
    unsigned int xlen;
    unsigned int offset;
    unsigned int xcnt;
    
    unsigned int cntpacket;
    unsigned int cntframe;
    
    unsigned char cmd[32];
    unsigned char data[EAD_INPUT_BUFFER_SIZE];
    
} T_SERIAL;





typedef struct struct_devstate
{
    unsigned int bConnection;
    unsigned int bPairstate;
    unsigned int bVinOk;
    unsigned int bAutotune;
    unsigned int bCarb;
    APP_STATE bAppDemoMode;
    
    unsigned int bRxdevmsg;
    unsigned int bRxvinmsg;
    unsigned int bRxecmmsg;
    unsigned int bRxr2rmsg;
    unsigned int bRxdtcmsg;
    
    unsigned int bRxee2msg;
    unsigned int bRxkeymsg;
    
    unsigned int bRxmaxmsg;
    unsigned int bRxcpymsg;
    unsigned int bRxbk1msg;
    
    //unsigned int bRxsummsg;
    unsigned int bRxssmmsg;
    
    
    unsigned int bRxgsdmsg;
    unsigned int bRxxprmsg;
    unsigned int bRxparmsg;
    
    
    unsigned int bRxtttmsg;
    unsigned int bRxhxxmsg;
    unsigned int bRxym4msg;
    
    unsigned int bRxwrmmsg;
    unsigned int bRxwtmmsg;
    unsigned int bRxflhmsg;
    
    unsigned int bRxota0msg;
    unsigned int bRxotb1msg;
    unsigned int command_1;
    
    unsigned int bRxlivmsg;
    unsigned int bRytunmsg;
    
    unsigned int bRztrmmsg;
    
    unsigned int bRxalsmsg;
    
    unsigned int bRxrrrmsg;
    
    
    unsigned int bRxVEDflag;
    
    
    unsigned int checksum;
    unsigned int bAllTables;
    unsigned int bAllSlots;
    
    
    unsigned int min_TABLEID;       // min
    unsigned int max_TABLEID;       // max ( T_TABLEID_MAX, ... )
    unsigned int off_TABLEID;       // offset
    
    unsigned char retbuf[128];
    unsigned int connectedToWideband;
    
} T_DEVSTATE;


typedef struct struct_livedata
{
    
    float fliveBatteryVoltage;
    float fliveMAP;
    float fliveTPS;
    float fliveEngineTemp;
    float fliveAirTemp;
    
    float fliveETvolts;
    float fliveIATvolts;
    float fliveMAPvolts;
    float fliveTPSvolts;
    
    float fliveRPM;
    
    float fliveAdvDegRear;
    float fliveAdvDegFront;
    
    float fliveInjPWMrear;
    float fliveInjPWMfront;
    
    float fliveVEfront;
    float fliveVErear;
    
    float fliveSparkKnockFront;
    float fliveSparkKnockRear;
    
    float fliveDesiredLambda;
    
    float fliveO2voltsFront;
    float fliveO2voltsRear;
    
    float fliveAdaptFuelPercentFront;
    float fliveAdaptFuelPercentRear;
    
    float fliveVehicleSpeed;
    float fliveGear;
    
    
    float fliveInjectorSize;
    float fliveAverageFuelEconomy;
    float fliveInstFuelEconomy;
    float fliveHp;
    float fliveTorque;
    float fliveOdometer;
    
    float fliveInjPwmFrontRpm;
    float fliveInjPwmRearRpm;
    float fliveInjOdometer;
    
    
    float fliveDistTraveled;
    float fliveFuelUsed;
    float fliveSecondsFuelUsed;
    
    float fliveInjectorDutyCycleFront;
    float fliveInjectorDutyCycleRear;
    float fliveTargetAFR;
    
    float fliveWideBandFrontAFR;
    float fliveWideBandRearAFR;
    float fliveWidebandHeaterStatus;
    float tripOdometerStart;
    
} T_LIVEDATA;



typedef struct struct_dtcdata
{
    unsigned char msg[8];
    unsigned char state[4];
    unsigned char error[64*6+1];
    
} T_DTCDATA;


typedef struct struct_limitswitches
{
    unsigned char limitstate[8];
} T_LIMITSWITCH;



typedef struct struct_maploaded
{
    
    NSTimeInterval mapTimestamp;
    char mapId[16];
    char mapVin[32];
    char mapLegacy[32];
    char mapModel[32];
    char mapExhaustOEM[32];
    char mapExhaustName[128];
    char mapExhaustPN[32];
    char mapYear[8];
    char mapBaffle[128];
    char mapEngine[32];
    char mapNumber[8];
    char mapCreated[16];
    char mapModified[16];
    char mapCylinders[32];
    char mapFirmware[32];
    
    int  mapValues [25*25];
    int  mapMode;
    int  mapIndex;
    
} T_MAPLOADED;



typedef struct structgridtableattr
{
    unsigned char display[4];
    
} T_GRIDTABLEATTR;



typedef struct structtransfertable
{
    T_EEMAP         *eemapPtr;
    T_EEMAP         *coleemapPtr;
    T_EEMAP         *roweemapPtr;
    
    unsigned int    eetablesize;
    unsigned int    coleemapSize;
    unsigned int    roweemapSize;
    
    unsigned int    tableid;
    unsigned int    modflag;
    unsigned int    modflagHeader;
    
} T_TRANSFERTABLE;



typedef struct structgridtable
{
    
    T_TRANSFERTABLE   tflashtransfer;
    
    unsigned int    numcol;
    unsigned int    numrow;
    
    unsigned int    maxnumcol;
    unsigned int    maxnumrow;
    
    
    T_GRIDTABLEATTR gridattr[30][30];
    
    float           grid[30][30];
    float           headercol[30];
    float           headerrow[30];
    
    
    unsigned int    width_colhdr;
    unsigned int    width_coldata;
    
    unsigned int    firsttimeflag;
    unsigned int    rawdataflag;
    
    
    float           minvalue;
    float           maxvalue;
    
    float           lowstep;
    float           midstep;
    float           histep;
    
    float           subtractor;
    float           factor;
    float           divider;
    unsigned int    convmode;
    
    
    float           colsubtractor;
    float           colfactor;
    float           coldivider;
    float           colroundoff;
    int             *colfixptr;
    unsigned int    colhdrflag;
    unsigned int    colconvmode;
    
    float           rowsubtractor;
    float           rowfactor;
    float           rowdivider;
    float           rowroundoff;
    int             *rowfixptr;
    unsigned int    rowhdrflag;
    unsigned int    rowconvmode;
    
    
    unsigned int    btnStepRoundoff;
    unsigned int    btnAllPercentage;
    unsigned int    btnDlgAll;
    unsigned int    btnDlgColumn;
    unsigned int    btnDlgRow;
    
    
    float           icellValue;
    float           icellProgValue;
    unsigned int    icellColumn;
    unsigned int    icellRow;
    
    T_EEMAP         eemapMdata[50];
    T_EEMAP         eemapXdata[50];
    T_EEMAP         eemapYdata[50];
    
    int             fixXheader[30];
    int             fixYheader[30];
    
    
    
    //BOOL            bKeyPressed;
    //unsigned int    modifiedcellflag;
    
    
    
} T_GRIDTABLE;



typedef struct structflashtransfer
{
    unsigned int    tcount;
    unsigned int    index;
    
    T_TRANSFERTABLE ttransfertable[T_FLASH_MAX];
    
} T_FLASHTRANSFER;




typedef struct struct_slotmap
{
    unsigned int    curr_slot;
    unsigned int    prev_slot;
    
} T_SLOT_MAP;


typedef struct struct_ota
{
    char cmd[5]; // account for null terminator
    unsigned char data[192];
    unsigned int ffFlag;
} T_OTA;


typedef struct struct_transfermac
{
    unsigned int state;
    unsigned int stateerr;
    unsigned int nextstateflag;
    unsigned int nextstate;
    unsigned int prevstate;
    
    unsigned int stateexit;
    
    
    unsigned int count;
    unsigned int counter;
    unsigned int postretry;
    
    unsigned int webkey;
    unsigned char bufkey[4];
    
    unsigned int tableflag;
    unsigned int tablepending;
    
    unsigned int tableindex;
    unsigned int tableindexmax;
    unsigned int tableoffset;
    unsigned int tableoffsetmax;
    
} T_TRANSFERMAC;


typedef struct struct_packdata
{
    unsigned char databuf[320];
} T_PACKDATA;



typedef struct structFirmwareUpdate
{
    CHECKFIRMWARE_ACTION flag;
    
    //    unsigned int major;
    //    unsigned int minor;
    //    unsigned int tick;
    
    unsigned int updateflag;
    
    unsigned int critical;
    
    unsigned int minMajor;
    unsigned int minMinor;
    unsigned int minTick;
    
} T_FRMWRUPDATE;


typedef struct structEcmUpdate
{
    unsigned int  flashmode;
} T_ECMUPDATE;


typedef struct structdemo
{
    unsigned int  flag;
    unsigned int  demobike;
    
} T_DEMO;



typedef struct structreach
{
    
    unsigned int    hflag;  // host
    unsigned int    prev_hflag;
    
    unsigned int    iflag; // internet
    unsigned int    wflag; // wifi
    
    
    unsigned int    btflag;
    unsigned int    prev_btflag;
    
    unsigned int    streamevent; // stream event
    unsigned int    prev_streamevent;
    
    
    unsigned int    prev_orientation;
    unsigned int    orientation;
    
    
    unsigned int    appActive;
    unsigned int    appActive_prev;
    
    unsigned int    appBackground;
    unsigned int    appBackground_prev;
    
    unsigned int    sesionOpen;
    unsigned int    sesionClose;
    
    
    unsigned int    accessoryconnected;
    unsigned int    accessoryconnected_prev;
    
    unsigned int    accessorydisconnected;
    unsigned int    accessorydisconnected_prev;
    
    
    unsigned int    accessorylist;
    unsigned int    accessorylist_prev;
    
    
    unsigned int    validprotocolstring;
    unsigned int    validprotocolstring_prev;
    
    
} T_REACH;



//typedef struct struct_livedatasave
//{
//    unsigned int current[7];
//    
//} T_LIVEDATASAVE;



typedef struct struct_rawslots
{
    unsigned int    slotflag;
    T_RAWSECTOR     rawdata[96];
    
} T_RAWSLOTS;


typedef struct struct_arrayfloat30
{
    float   data[30];
} T_ARRAYFLOAT;

typedef struct struct_throttlewheelHeader
{
    T_ARRAYFLOAT colHeader;  //x-axis
    T_ARRAYFLOAT rowHeader;  //y-axis
} T_THROTTLEWHEELHEADER;


typedef struct struct_progdatasave
{
    
    unsigned int progflag;              // global progressivity table
    unsigned int bladecontrolflag;
    unsigned int bladecontrolaltflag;
    unsigned int gearflag;
    unsigned int limitflag;
    BOOL         dataSaved;
    
    unsigned int prog_curr_value;
    unsigned int prog_on_entering;
    unsigned int prog_on_exiting;
    
    
    unsigned int actexflag;             // global active exhaust table
    unsigned int actex_gear1flag;
    unsigned int actex_gear2flag;
    unsigned int actex_gear3flag;
    unsigned int actex_gear4flag;
    
    unsigned int actex_curr_value;
    unsigned int actex_on_entering;
    unsigned int actex_on_exiting;
    
    BOOL         headerDataSaved;
    T_THROTTLEWHEELHEADER bladeControlHeader_1;
    T_THROTTLEWHEELHEADER bladeControlHeader_2;
    
} T_PROGDATASAVE;


typedef struct struct_generic_modflag
{
    unsigned int    genericmodflag;
    unsigned int    tableid;          // debug
    
} T_GENERIC_MODFLAG;


typedef struct struct_sectorperslots
{
    
    unsigned int     swAutoCompressionRelease;  // byte1, bit2
    unsigned int     swJiffyStand;              // byte1, bit0
    unsigned int     swActiveIntake;            // byte0, bit2
    unsigned int     swActiveExhaust;           // byte0, bit1
    unsigned int     swDecelPopState;           // byte0, bit1
    unsigned int     eitmsState;                // byte2, bit2
    int              camKey;
    int              camKeyOrg;
    unsigned long     speedometerValue;          // sector [94], 0x20,0x21
    
    unsigned int     globalmodflag;
    BOOL             newCamSelected;
    int              userIOFront;
    int              userICFront;
    
    
    T_PROGDATASAVE      t_progdatasave;
    T_GENERIC_MODFLAG   t_genericmodflag [TABLEID_MAXALL];
    
    
    T_GRIDDATA       t_data [TABLEID_MAXALL];
    
    T_GRIDDATA       t_progBladeControl;
    T_GRIDDATA       t_progBladeControlAlt;
    T_GRIDDATA       t_progGearTrans;
    T_GRIDDATA       t_progLimit;
    
    T_GRIDDATA       t_actex_Gear1;
    T_GRIDDATA       t_actex_Gear2;
    T_GRIDDATA       t_actex_Gear3;
    T_GRIDDATA       t_actex_Gear4;
    
    
} T_SECPERSLOTS;




typedef struct struct_mapsearchsave
{
    unsigned int current[10];       // same as saveflag
    
} T_MAPSEARCHSAVE;



typedef struct struct_webtutorial
{
    unsigned int pageid;
    unsigned int prev_pageid;
    
} T_WEBTUTORIAL;


typedef struct struct_statusbar
{
    unsigned int    hideanimatedflag;
    float           hidedelayvalue;
    
} T_STATUSBAR;

typedef struct struct_mapid
{
    unsigned int    mapID;
    unsigned char   mapModel[255];
    
} T_MAPID;


typedef struct struct_internalflash
{
    unsigned int    checksum;
    unsigned int    rsmChecksum;
    unsigned char   data[256];
    
} T_INTERNALFLASH;



typedef struct struct_geoloc
{
    unsigned        geoflag;
    float           longitude;
    float           latitude;
    NSTimeInterval  geoTime;
    
    unsigned int    countryid;
    
    unsigned int    locationflag;
    
} T_GEOLOC;





typedef struct struct_throttlewheel
{
    float           bladecontrol[17][17];
    float           bladecontrolAlt[17][17];
    float           gear[1][1];
    float           limit[7][1];
} T_THROTTLEWHEEL;



typedef struct struct_actexhaustwheel
{
    float           gear1[8][8];
    float           gear2[8][8];
    float           gear3[8][8];
    float           gear4[8][8];
} T_ACTEXHAUSTWHEEL;




#endif
